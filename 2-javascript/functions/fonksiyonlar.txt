### FUNCTIONS ##################################################################

--- Tanım ----------------------------------------------------------------------

Fonksiyonlar bir işlemi veya işlem grubunu farklı yerlerde ve farklı zamanlarda
çalıştırmak istediğimizde tekrar tekrar aynı işlemleri yazmadan kısa bir şekilde
bu işlem grubunu çalıştırmamızı sağlayan yapılardır.

Fonksiyonlar eğer yüksek seviyeli bir fonksiyon gibi oluşturulmadılarsa
hafızada tanımlandıktan sonra değiştirilemezler.

Javascript'te fonksiyonlar birinci sınıf nesnelerdir;

 - Değişkenlere, sabitlere ve property'lere atanabilirler.
 - Fonksiyonlara argüman olarak girilebilirler.
 - Fonksiyonlardan parametre olarak döndürülebilirler.
--------------------------------------------------------------------------------

--- Prosedür -------------------------------------------------------------------

var students = ["Ahmet", "Mehmet", "Veli"];
function greetStudents(students) {
    for (student of students) {
        console.log(`Merhaba, ${student}`);
    }
}
greetStudents(students);
Merhaba, Ahmet
Merhaba, Mehmet
Merhaba, Veli

### NOT ###: Burada ` işaretleri bizim bir string içerisine değişken eklememizi
sağlar. Eklenecek değişken ise ${degiskenadi} içerisine yazılır. Normalde +
operatörü ile iki string'i birleştirdiğimiz zaman bu iki string ile birlikte
bir de bunların birleşmiş hali için RAM'de ayrıca bir string daha tanımlanır.
Bu da hafızayı gereksiz yere doldurur. Bunun yerine biz bu yöntemi kullanırız. 

Üstteki gibi geriye değer döndürmeyen yapılara prosedür denir. 
--------------------------------------------------------------------------------

--- Fonksiyon ------------------------------------------------------------------

Alttaki gibi değer döndüren yapılara fonksiyon denir.

function timeRemaining(timeElapsed, endTime) {
    return endTime - timeElapsed;
}
var left = timeRemaining(42, 240);
console.log(left);
198
--------------------------------------------------------------------------------

--- Fonksiyon Tanımlama (Function Declaration) ---------------------------------

Klasik, eski tip fonksiyon tanımlama yöntemidir. Günümüzde pek kullanılmaz. 
Fonksiyonu global scope'a kaydeder.

function sum(x, y) {
  return x + y;
}
console.log(sum(5, 8));
13
--------------------------------------------------------------------------------

--- Anonim Fonksiyon İfadesi (Anonymous Function Expression) -------------------

İsimsiz fonksiyonlardır. Kendi scope'larına kaydedilirler.

var newFunc = function (x, y) {
  return x + y;
};
console.log(newFunc(5, 8));
13
--------------------------------------------------------------------------------

--- İsimlendirilmiş Fonksiyon İfadesi (Named Function Expression) --------------

Anonim fonksiyonların isimlendirilmiş halidir. Kendi scope'larına kaydedilirler.

Kullanımı pek yaygın olmasa da Kyle Simpson her zaman bunu kullanmamızı 
öneriyor. Bunun sebebi rekürsif işlemler yapıyorsak ya da çok katmanlı bir 
scope'a sahip bir programla çalışıyorsak isimlendirilmiş fonksiyon ifadeleri 
kendi kendilerini açıklamış olurlar. Bu da okunabilirliği arttırır.

var newFunc = function sum(x, y) {
  return x + y;
};
//console.log(sum(5, 8)); // HATA!!!
console.log(newFunc(5, 8));

Burada en son newFunc yerine sum fonksiyonuna erişmek istersek hata alırız. 
Çünkü sum'ın kendi scope'u vardır ve burada tanımlıdır. newFunc ise burayı 
referans gösterir.
--------------------------------------------------------------------------------

--- Parametre (Parameter) ------------------------------------------------------

Bir fonksiyonun tanımlanırken fonksiyon içerisinde çalışacak, işleme alınacak 
argümanları tutan değişkenlerdir. Fonksiyonları () ile çalıştırana yani 
çağırana kadar bu parametrelerin değerini, içlerinde tuttukları veriyi bilmemiz 
gerekmez.
--------------------------------------------------------------------------------

--- Argüman (Argument) ---------------------------------------------------------

Bir fonksiyon çalıştırıldığı anda parametreler vasıtasıyla fonksiyonun 
içerisine giren ve fonksiyon içerisinde işleme alınacak olan değerlerdir. Bu 
değerler parametrelerin içerisinde tutulur. 
--------------------------------------------------------------------------------

--- Arrow Function (=>) --------------------------------------------------------

Arrow function, Javascript'te yazdığımız fonksiyonları ifade etmenin bir başka 
yoludur.

var nameImprover = (name, adj) => `Lord ${name}, The Monster ${adj}`;
console.log(nameImprover("Caner", "Slayer"));
Lord Caner, The Monster Slayer

Arrow function'da function deyimini kullanmamıza gerek yoktur. 

Arrow function'da eğer fonksiyon içerisine birden fazla parametre girecekse;

(parametre1, parametre2) => parametre1 + parametre2;

Eğer fonksiyon içerisine sadece tek bir parametre girecekse ()'i de kullanmadan;

parametre1 => parametre1 + parametre2;

şeklinde fonksiyonu tanımlarız.

Arrow function'da eğer fonksiyonun içi tek satırlıksa;

(parametre1, parametre2) => parametre1 + parametre2;

Eğer fonksiyonun içi çok satırlıksa;

(parametre1, parametre2) => {
    let parametre3 = 0;
    parametre3 = parametre1 + parametre2;
    return parametre3 * 0.5;
}

şeklinde fonksiyonu tanımlarız.

Arrow function'ı diğer fonksiyonlardan ayıran en önemli özelliği kendi this 
deyimine sahip olmamasıdır. Diğer fonksiyonların içerisinde this deyimi 
kullanıldığında bu deyim fonksiyonun içerisinde bulunduğu scope'u işaret eder. 
Fakat arrow function'da this deyimi kullanılamaz. Kullanılsa da çalışmaz. Arrow 
function içerisindeki her şey yalnızca kendi scope'u içerisinde gerçekleşir.

Arrow function'lar metot olarak kullanılamazlar.

Arrow function'lar constructor olarak kullanılamazlar.

### NOT ###: Her zaman sırf daha kısa ve okunabilir diye arrow functions 
kullanmamalıyız. Özellikle yüksek seviyeli fonksiyonlar içerisine giren 
callback fonksiyonlarını kesinlikle adlandırarak kullanmalıyız. Arrow 
functions'ı özellikle basit bir fonksiyon tanımlayacaksak veya çok fazla 
kullanılmayacak bir fonksiyon yazacağımız zaman kullanmalıyız.
--------------------------------------------------------------------------------

--- Spread Operatörü (...) -----------------------------------------------------

Bu operatör fonksiyon içerisine giren ve herhangi bir değişkenle eşleşmeyen 
bütün argümanları yanına eklendiği değişkende birleştirir.

const createTuple = (a, b, c, ...d) => {
  return [
    [a, c],
    [b, d],
  ];
};
const newTuples = createTuple("It", "be", "could", "anyone", "no one");
console.log(newTuples);
[ [ 'It', 'could' ], [ 'be', [ 'anyone', 'no one' ] ] ]
--------------------------------------------------------------------------------

--- arguments ------------------------------------------------------------------

Bu deyim bir fonksiyon içerisine giren tüm parametreleri içerisinde barındırır.
Sadece fonksiyon içerisine geçen değerleri alır. Varsayılan parametreleri almaz.
Ayrıca spread operatörü de arguments'in alacağı parametreleri etkilemez.

const createTuple = function (a, b, c, ...d) {
  console.log(arguments);
};
const newTuples = createTuple("It", "be", "could", "anyone", "no one");
[Arguments] {
  '0': 'It',
  '1': 'be',
  '2': 'could',
  '3': 'anyone',
  '4': 'no one'
}
--------------------------------------------------------------------------------

--- Varsayılan Parametreler ----------------------------------------------------

Bir fonksiyonda tanımlanan parametreler eğer fonksiyonun çağırılma anında 
fonksiyon içerisine girilmemişlerse hata alırız. Fakat varsayılan parametre 
atayarak bu sorunu çözebiliriz.

// ES6 İle Yazılmış Versiyon
const add = function (a, b = 2) {
  console.log(arguments);
  return a + b;
};
console.log(add(3));
[Arguments] { '0': 3 }
5

Şimdi bir de üstteki kodları ES5 ile yazalım.

// ES5 İle Yazılmış Versiyon
const add = function (a, b) {
  b = b || 2;
  console.log(arguments);
  return a + b;
};
console.log(add(3));
[Arguments] { '0': 3 }
5
--------------------------------------------------------------------------------

--- Dizi Benzeri Nesneler (Array-Like Object) ----------------------------------

Javascript'te diziye benzeyen indexleri olan fakat dizi olmayan, üzerinde push, 
pop, slice gibi dizi metotları uygulanamayan array-like object denilen yapılar 
vardır.

{
    0: "was",
    1: "it",
    2: "in"
}

Örneğin; arguments metodu bize bir fonksiyona giren argümanları dizi benzeri 
bir nesne olarak döndürür. Eğer biz bu dizi benzeri nesneyi gerçek bir diziye 
dönüştürmek istiyorsak aşağıdaki yöntemi kullanırız.

// ES5 İle Yazılan Versiyon
const constructArr = function () {
  const arr = Array.prototype.slice.call(arguments);
  return arr;
};
console.log(constructArr("was", "it", "in"));
[ 'was', 'it', 'in' ]

Burada Array.prototype.slice.call(arguments); ifadesi arguments nesnesini bir 
diziye çevirir. Arka planda nasıl çalıştığını anlamamız çok mühim değilmiş.

// ES6 İle Yazılan Versiyon
const constructArr = function () {
  const arr = Array.from(arguments);
  return arr;
};
console.log(constructArr("was", "it", "in"));
[ 'was', 'it', 'in' ]
--------------------------------------------------------------------------------

--- Fonksiyonlar Da Nesnedir ---------------------------------------------------

Javascript'te fonksiyonlar da birer nesnedirler. Eğer istersek fonksiyonlara da 
property'ler ekleyebiliriz.

const add = function (a, b) {
  return a + b;
};
add.example = "testing 123";
console.log(add.example);
testing 123
--------------------------------------------------------------------------------
################################################################################