### TEMELLER (BASICS) ##########################################################

--- Tanım ----------------------------------------------------------------------
CSS'in açılımı Cascading Style Sheets'dir. 

CSS, HTML elementlerinin ekranda nasıl görüntüleneceğini düzenler.

Aynı anda birden fazla Web sayfasının yerleşimini kontrol edebilir.

Aynı HTML gibi CSS'de çalıştırılabilen bir şey değildir. Bir programlama dili 
değildir. Daha çok sayfanın nasıl görüneceğini belirleyen bir kurallar 
bütünüdür.
--------------------------------------------------------------------------------

--- CSS'in Genel Yapısı --------------------------------------------------------
h1 {
    font-size: 24px;
	font-family: Helvetica;
	color: blue;
}

h1 kısmına seçici (selector) denir.

font-size kısmına özellik (property) denir.

24px kısmına değer (value) denir.

font-size: 24px; kısmına ise kural (declaration, rule) denir.
--------------------------------------------------------------------------------

--- CSS'in Kullanım Şekilleri --------------------------------------------------
CSS'in üç farklı kullanım çeşidi vardır:
 - Inline (Satır içi) CSS
 - Internal (Dahili) CSS
 - External (Harici) CSS
--------------------------------------------------------------------------------

--- Inline (Satır içi) CSS -----------------------------------------------------
Bu kullanım şeklinde stiller her bir HTML etiketine ayrı ayrı yazılır. 

Bu kullanım türü pek tavsiye edilmez çünkü büyük web sitelerinde ufak bir
değişiklik yapmak gerektiğinde her bir etikette değişikliği tekrarlamak çok
zaman kaybettirir. 

Örneğin;

<!DOCTYPE html>
<head>
    <title>Document</title>
</head>
<body>
    <div id="wrapper" style="background-color:cyan; width:100px;">
        <header style="background-color:cyan; width:250px;">Anasayfa</header>
        <nav style="background-color:cyan; width:300px;">
            <ul>
                <li><a href="index.html">Anasayfa</a></li>
                <li><a href="iletisim.html">İletişim</a></li>
            </ul>
        </nav>
        <div id="icerik" style="background-color:red; width:auto;">
            Burası İçerik
        </div>
        <footer style="background-color:white; width:auto;">
            Burası footer
        </footer>
    </div>
</body>
</html>
--------------------------------------------------------------------------------

--- Internal (Dahili) CSS ------------------------------------------------------
Bu kullanım şeklinde stiller HTML dosyasında head kısmının içine style tagıyla
yazılır. 

Inline CSS yöntemine göre daha iyi olsa da her alt sayfa için değişiklikleri
tekrarlamak gerekir. Bu da çok zaman kaybettirir. 

Örneğin;

<!DOCTYPE html>
<head>
    <title>Document</title>
    <style>
        #wrapper{
            margin: auto;
            background-color: aquamarine;
            width: 500px;
            height: 500px;
        }
        header{
            background-color: cyan;
        }
        nav{
            background-color: red;
        }
    </style>
</head>
<body>
    <div id="wrapper">
        <header>Anasayfa</header>
        <nav>
            <ul>
                <li><a href="index.html">Anasayfa</a></li>
                <li><a href="iletisim.html">İletişim</a></li>
            </ul>
        </nav>
        <div id="icerik">
            Burası İçerik
        </div>
        <footer>
            Burası footer
        </footer>
    </div>
</body>
</html>
--------------------------------------------------------------------------------

--- External (Harici) CSS ------------------------------------------------------
HTML kodu harici bir CSS dosyasından kontrol edilir. En hızlı ve iyi
yöntemdir.
--------------------------------------------------------------------------------

--- Stillerin Miras Bırakılması (Inheritance of Styles) ------------------------
<h1>Hey, <em>look</em> at the monkey</h1>

Burada h1 değerine atadığımız tüm stiller içindeki etiketlerin tümüne
aktarılır. Yani h1'in stilleri em için de geçerli olur.

Fakat illaki her özellik aktarılacak diye birşey yoktur. Örneğin bir listeye
çerçeve vermek istersek liste içindeki elemanlara çerçeve vermez.

ul {
    border: 1px;
}

Burada sadece listenin etrafına çerçeve verir.
--------------------------------------------------------------------------------

--- reset.css ------------------------------------------------------------------
Reset CSS tüm tarayıcıların varsayılan değerlerini sıfırlamaya yarar. 

Örneğin; Firefox site kenar boşluğu için 5px verdiğini düşünelim. Safari ise 
10px veriyor olsun. Reset CSS bu değerleri sıfırlıyor. Her iki tarayıcı da
siteyi aynı şekilde görmüş oluyor.
--------------------------------------------------------------------------------

--- normalize.css --------------------------------------------------------------
Normalize CSS tüm özellikleri sıfırlamak yerine bunlara bir değer atar. 

Reset CSS’de tüm değerlerin sıfırlanması sıkıntı çıkarabiliyordu. Bunun
üzerine Normalize CSS çıkarıldı. 

Örneğin; Normalize CSS site kenar boşluğuna 5px atıyor. Bu sayede her tarayıcı 
kenar boşluğunu 5px olarak gösteriyordu.
--------------------------------------------------------------------------------

--- Detaylar -------------------------------------------------------------------
HTML kodlarına CSS yazarken çoğunlukla class özelliğini kullanmalıyız. Eğer
HTML'de gerçekten bir etiketin tüm yazıldığı yerlerde hep aynı stili
kullanacaksak o zaman etiketlerin adına CSS yazmalıyız. Örneğin; bir sayfadaki 
linklerin tümünün mavi ve altı çizili olmasını istiyorsak o zaman a etiketine 
CSS yazarız. Diğer tüm durumlarda class'lardan faydalanmalıyız.

Miras alma olayını mümkün olduğunca az kullanmalıyız. CSS'i gayet basit ve 
anlaşılır bir şekilde yazmalıyız. Kompleks yapılardan ve iç içe aktarılan 
kurallardan kesinlikle uzak durmalıyız. Bu ileride başımızı çok ağrıtabilir ve
saatlerce tek bir hatayla uğraşmamıza sebep olabilir.

HTML'deki id'leri ve !important özelliğini kesinlikle kullanmamalıyız. Bu iki
özellik bir etiketin sahip olduğu tüm class özelliğinin üzerine yazar. Çünkü
iyi bir geliştirici bir stilin nereden geldiğini bulabilmelidir. Sürekli nerden
geldiğini bilmediğimiz stil özelliklerini bu şekilde zorlayarak yapmak kodların
gereğinden fazla karışmasına farklı noktalarda aynı yere stil ekleyen kodlar
olmasına sebep olur.

float ile nesneleri sayfada konumlandırmak artık eski bir yöntemdir. Mecbur 
olmadıkça kullanmamalıyız. Fakat çok eski bir CSS özelliği olduğu için birçok 
yerde karşımıza çıkabilir. Bu sebeple ne yaptığını bilmeliyiz.

box-sizing: border-box özelliğini sitede bulunan tüm etiketleri seçen *
içerisinde kullanarak yaptığımız her Web sitesine eklemek işimizi oldukça 
kolaylaştıran bir şeydir. Bu sayede herhangi bir etikete width ve height 
verdiğimizde bu değerler etiket içindeki içerik + padding + border'ı kapsar. 
Aksi takdirde width ve height'a verdiğimiz değerler yalnızca etiket içindeki 
içeriğin boyutunu kapsar. Bunu yapmadığımızda width ve height'ı 100px olan bir
div'imiz olduğunu düşünelim. Sadece içeriğin boyutu 100px'e eşit olacaktır. 
Eğer buna 2px'lik bir padding eklediğimizde içerik(100px) + padding(2px)'e, 
3px'lik bir border eklediğimizde içerik(100px) + padding(2px) + border(3px)'e 
eşit olacaktır. Bu da bizi içinden çıkılmaz bir matematik hesabına götürür.

CSS yazarken miras almayı sadece aynı işlevi yapan fakat aralarında çok ufak 
farklar bulunan şeyleri yazarken kullanmalıyız. Örneğin; üç farklı renkte 
butonumuz olduğunu düşünelim. Bu üç butonu birbirinden ayıran tek şey renkleri 
ise bu üç butonun içerisine aynı CSS özelliklerini tekrar tekrar yazmak yerine 
tek bir tanesine tüm özellikleri yazarız. Diğerlerine ise sadece rengi yazarız. 
Butonu kullanmak istediğimiz yerde de önce temel class'ı yazarız. Ardından 
rengi belirten class'ı yazarız. Bu sayede kendimizi tekrar etmekten kurtarmış 
oluruz. Mirası alan class'ların içerisine miras aldığı class'ı belirten bir 
yorum da yazarsak mükemmel olur.

CSS'de bir şeyleri denemek istiyorsak ya da varolan bir yapının bir özelliğini 
değiştirmek istiyorsak hemen editöre yazmak zorunda değiliz. Chrome Developer 
Tools'da Öğeyi İncele özelliğiyle hızlıca istediğimiz CSS özelliklerini 
ekleyebilir. Öğenin görünümünü geçici olarak değiştirebiliriz. Aynı zamanda 
buranın yardımıyla bir CSS özelliğinin neden çalışmadığını veya bir özelliğin 
nereden miras alındığını inceleyebiliriz.
--------------------------------------------------------------------------------
################################################################################