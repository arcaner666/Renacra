### FUNCTIONS ##################################################################

--- Tanım ----------------------------------------------------------------------

Fonksiyonlar bir işlemi veya işlem grubunu farklı yerlerde ve farklı zamanlarda
çalıştırmak istediğimizde tekrar tekrar aynı işlemleri yazmadan kısa bir şekilde
bu işlem grubunu çalıştırmamızı sağlayan yapılardır.
--------------------------------------------------------------------------------

--- Prosedür -------------------------------------------------------------------

var students = ["Ahmet", "Mehmet", "Veli"];
function greetStudents(students) {
    for (student of students) {
        console.log(`Merhaba, ${student}`);
    }
}
greetStudents(students);
Merhaba, Ahmet
Merhaba, Mehmet
Merhaba, Veli

### NOT ###: Burada ` işaretleri bizim bir string içerisine değişken eklememizi
sağlar. Eklenecek değişken ise ${degiskenadi} içerisine yazılır. Normalde +
operatörü ile iki string'i birleştirdiğimiz zaman bu iki string ile birlikte
bir de bunların birleşmiş hali için RAM'de ayrıca bir string daha tanımlanır.
Bu da hafızayı gereksiz yere doldurur. Bunun yerine biz bu yöntemi kullanırız. 

Üstteki gibi geriye değer döndürmeyen yapılara prosedür denir. 
--------------------------------------------------------------------------------

--- Fonksiyon ------------------------------------------------------------------

Alttaki gibi değer döndüren yapılara fonksiyon denir.

function timeRemaining(timeElapsed, endTime) {
    return endTime - timeElapsed;
}
var left = timeRemaining(42, 240);
console.log(left);
198
--------------------------------------------------------------------------------

--- Arrow Function (=>) --------------------------------------------------------

Arrow function, Javascript'te yazdığımız kodları ifade etmenin bir başka 
yoludur. C#'taki LINQ kütüphanesindeki kullanımıyla benzer bir kullanımı vardır.

var nameImprover = (name, adj) => `Lord ${name}, The Monster ${adj}`;
console.log(nameImprover("Caner", "Slayer"));
Lord Caner, The Monster Slayer

Arrow function'da function deyimini kullanmamıza gerek yoktur. 

Arrow function'da eğer fonksiyon içerisine birden fazla parametre girecekse;

(parametre1, parametre2) => parametre1 + parametre2;

Eğer fonksiyon içerisine sadece tek bir parametre girecekse ()'i de kullanmadan;

parametre1 => parametre1 + parametre2;

şeklinde fonksiyonu tanımlarız.

Arrow function'da eğer fonksiyonun içi tek satırlıksa;

(parametre1, parametre2) => parametre1 + parametre2;

Eğer fonksiyonun içi çok satırlıksa;

(parametre1, parametre2) => {
    let parametre3 = 0;
    parametre3 = parametre1 + parametre2;
    return parametre3 * 0.5;
}

şeklinde fonksiyonu tanımlarız.

Arrow function'ı diğer fonksiyonlardan ayıran en önemli özelliği kendi this 
deyimine sahip olmamasıdır. Diğer fonksiyonların içerisinde this deyimi 
kullanıldığında bu deyim fonksiyonun içerisinde bulunduğu scope'u işaret eder. 
Fakat arrow function'da this deyimi kullanılamaz. Kullanılsa da çalışmaz. Arrow 
function içerisindeki her şey yalnızca kendi scope'u içerisinde gerçekleşir.

Arrow function'lar metot olarak kullanılamazlar.

Arrow function'lar constructor olarak kullanılamazlar.
--------------------------------------------------------------------------------
################################################################################