### YÜKSEK SEVİYELİ FONKSİYONLAR VE CALLBACKLER ################################

--- Tanım ----------------------------------------------------------------------

Javascript'te bütün fonksiyonlar nesnedir. Aynı zamanda da veridir. Yani diğer 
programlama dillerinin aksine Javascript'te fonksiyonlar diğer fonksiyonlar 
içerisine parametre olarak girilebilirken aynı zamanda fonksiyonlar geriye 
fonksiyon döndürebilir.

Bu tarz işler yapan fonksiyonlara yüksek seviyeli fonksiyonlar denir.
--------------------------------------------------------------------------------

--- Genelleştirilmiş Fonksiyonlar (Generalized Functions) ----------------------

Fonksiyonlara neden ihtiyacımız olduğu anlamak için aşağıdaki örneği 
inceleyelim.

Aşağıda verilen kullarra göre 10'un karesini alan bir fonksiyon yazmak
istediğimizi varsayalım;

- İçerisine hiçbir argüman almamalı
- 10 * 10 ifadesini döndürmeli

Şimdi bu durumda yazacağımız kod nasıl olmalıdır?

function tenSquared() {
  return 10 * 10;
}

İşte bu çok kötü bir fonksiyon örneğidir. Ya 10 yerine 9'un karesini almak 
isteseydik. O zaman bir fonksiyon daha yazmak zorunda kalacaktık.

Bu sebeple bu fonksiyonu alttaki gibi genelleştirmemiz gerekmektedir;

function squareNumber(number) {
  return number * number;
}

Fonksiyonlardaki argüman ve parametre ilişkisindeki gibi nasıl ki bir 
parametrenin değerini yani fonksiyona giren argümanları o fonksiyon 
çalıştırılana kadar bilmemiz gerekmiyorsa yüksek seviyeli fonksiyonlarda da 
fonksiyon içerisine parametre olarak giren fonksiyonun içeriğine de bu yüksek 
seviyeli fonksiyonu çalıştırana kadar karar vermeyebiliriz.
--------------------------------------------------------------------------------

--- Yüksek Seviyeli Fonksiyonlar (High Order Functions) ------------------------

Şimdi ise alttaki gibi bir fonksiyonumuz olduğunu düşünelim.

function copyArrayAndMultiplyBy2(array) {
  const output = [];
  for (let i = 0; i < array.length; i++) {
    output.push(array[i] * 2);
  }
  return output;
}
const myArray = [1, 2, 3];
const result = copyArrayAndMultiplyBy2(myArray);

Bu fonksiyon da aslında problemli çünkü eğer bir bu dizideki elemanları 2 ile 
çarpmak yerine 2'ye bölmek istersek tüm fonksiyonu tek bir karakter değişikliği 
için baştan yazmak zorunda mı kalmalıyız? Tabi ki de hayır. Bunun yerine bu 
fonksiyonu yüksek seviyeli bir fonksiyon haline getirmeliyiz.

function copyArrayAndManipulate(array, instructions) {
  const output = [];
  for (let i = 0; i < array.length; i++) {
    output.push(instructions(array[i]));
  }
  return output;
}
const myArray = [1, 2, 3];
function multiplyBy2(input) {
  return input * 2;
}
const result = copyArrayAndManipulate(myArray, multiplyBy2);

Burada ise instructions parametresine hangi fonksiyonu verirsek onu bizim için 
işleyecek ve bize sonucu döndürecek. Bu sayede tüm fonksiyonu baştan yazmak 
yerine sadece farklı olan bölümleri yazdık.
--------------------------------------------------------------------------------

--- Callback -------------------------------------------------------------------

Yüksek seviyeli fonksiyon içerisine argüman olarak giren fonksiyonlara denir. 

Burada ifElse adlı fonksiyon içerisine argüman olarak fonksiyon almış ve kendi 
içerisindeki mantığa göre içerisine girilen fonksiyonu geri döndürdükten sonra 
çalıştırmıştır.

const ifElse = (condition, isTrue, isFalse) => {
  return condition ? isTrue() : isFalse();
};
ifElse(
  true,
  () => {
    console.log(true);
  },
  () => {
    console.log(false);
  }
);
true

Eğer üstteki;

return condition ? isTrue() : isFalse(); 

satırını;

return condition ? isTrue : isFalse;

şeklinde yazmış olsaydık geriye döndürdüğü fonksiyonu çalıştırmadan sadece 
fonksiyonun kendini döndürecekti.
--------------------------------------------------------------------------------

--- İç İçe Fonksiyon Yapısı ----------------------------------------------------

// ES5 Yazımı
var increment = function (n) {
  return n + 1;
};
var square = function (n) {
  return n * n;
};
var doMathSoIDontHaveTo = function (n, func) {
  return func(n);
};
console.log(doMathSoIDontHaveTo(5, increment));
console.log(doMathSoIDontHaveTo(4, square));
6
16

// ES6 Yazımı
const increment = (n) => {
  return n + 1;
};
var square = (n) => {
  return n * n;
};
var doMathSoIDontHaveTo = (n, func) => {
  return func(n);
};
console.log(doMathSoIDontHaveTo(5, increment));
console.log(doMathSoIDontHaveTo(4, square));
6
16
--------------------------------------------------------------------------------

--- Argümanların İçeriye Aktarılması -------------------------------------------

const ifElse = (condition, isTrue, isFalse, p) => {
  return condition ? isTrue(p) : isFalse(p);
};
ifElse(
  true,
  (p) => {
    console.log(`${true} ${p}`);
  },
  (p) => {
    console.log(`${false} ${p}`);
  },
  "Hi!"
);
true Hi!
--------------------------------------------------------------------------------

--- Argümanların Spread Operatörüyle Toplu Olarak İçeriye Aktarılması ----------

const ifElse = (condition, isTrue, isFalse, ...args) => {
  return condition ? isTrue(...args) : isFalse(...args);
};
ifElse(
  true,
  (...args) => {
    console.log(`${true} ${args}`);
  },
  (...args) => {
    console.log(`${false} ${args}`);
  },
  "Hi!",
  "Bye",
  "Hola"
);
true Hi!,Bye,Hola
--------------------------------------------------------------------------------
################################################################################